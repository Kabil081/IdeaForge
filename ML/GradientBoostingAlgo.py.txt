import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report
import seaborn as sns
import numpy as np

# Load your dataset
data = pd.read_csv('./ex_data.csv')

# Features and target
X = data[['age', 'current_savings', 'monthly_contribution', 'years_to_retirement', 'risk_tolerance']]
y = data['recommended_investment']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Gradient Boosting Classifier
gbc = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)

# Train the model
gbc.fit(X_train, y_train)

# Make predictions on the test set
y_pred = gbc.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("Classification Report:\n", classification_report(y_test, y_pred))

# Cross-validation
scores = cross_val_score(gbc, X, y, cv=5)
print(f"Cross-validation scores: {scores}")
print(f"Average cross-validation score: {scores.mean():.4f}")

# Feature importance
plt.figure(figsize=(10, 6))
feature_importance = gbc.feature_importances_
sorted_idx = feature_importance.argsort()
pos = np.arange(sorted_idx.shape[0]) + .5
fig, ax = plt.subplots(figsize=(10, 6))
ax.barh(pos, feature_importance[sorted_idx], align='center')
ax.set_yticks(pos)
ax.set_yticklabels(X.columns[sorted_idx])
ax.set_xlabel('Feature Importance')
ax.set_title('Feature Importance in Gradient Boosting Classifier')
plt.tight_layout()
plt.show()

# Example of predicting investment recommendation for a new retiree
current_age = 45
retirement_age = 65
years_to_retirement = retirement_age - current_age

# Prepare new data with calculated years_to_retirement
new_data = pd.DataFrame([[current_age, 200000, 2000, years_to_retirement, 1]], 
                         columns=['age', 'current_savings', 'monthly_contribution', 'years_to_retirement', 'risk_tolerance'])
predicted_investment = gbc.predict(new_data)

# Map the prediction back to the investment category
investment_options = {0: 'Mutual funds', 1: 'Gold', 2: 'Real estate', 3: 'Stock market', 4: 'Crypto currency'}
recommended_investment = investment_options[predicted_investment[0]]
print(f"Recommended investment option: {recommended_investment}")

# Function to calculate future savings
def calculate_future_savings(current_savings, monthly_contribution, years_to_retirement, annual_return_rate):
    months = years_to_retirement * 12
    future_savings = current_savings
    savings_over_time = [current_savings]
    for _ in range(months):
        future_savings += monthly_contribution
        future_savings *= (1 + annual_return_rate / 12)
        savings_over_time.append(future_savings)
    return future_savings, savings_over_time

# Function to calculate future savings without investment
def calculate_future_savings_without_investment(current_savings, monthly_contribution, years_to_retirement):
    months = years_to_retirement * 12
    future_savings = current_savings
    savings_over_time = [current_savings]
    for _ in range(months):
        future_savings += monthly_contribution
        savings_over_time.append(future_savings)
    return future_savings, savings_over_time

# Define expected annual return rates for each investment option
return_rates = {
    'Mutual funds': 0.07,
    'Gold': 0.05,
    'Real estate': 0.08,
    'Stock market': 0.10,
    'Crypto currency': 0.15
}

# Calculate future savings with investment
annual_return_rate = return_rates[recommended_investment]
future_savings_with_investment, savings_over_time_with_investment = calculate_future_savings(200000, 2000, years_to_retirement, annual_return_rate)
print(f"Estimated savings at retirement with investment: {future_savings_with_investment:,.2f}")

# Calculate future savings without investment
future_savings_without_investment, savings_over_time_without_investment = calculate_future_savings_without_investment(200000, 2000, years_to_retirement)
print(f"Estimated savings at retirement without investment: {future_savings_without_investment:,.2f}")

# Generate graph
months = list(range(len(savings_over_time_with_investment)))
plt.figure(figsize=(12, 6))
plt.plot(months, savings_over_time_with_investment, label=f'Future Savings with {recommended_investment}')
plt.plot(months, savings_over_time_without_investment, label='Future Savings without Investment', linestyle='--')
plt.axhline(y=200000, color='r', linestyle='--', label='Initial Savings')
plt.xlabel('Months')
plt.ylabel('Savings')
plt.title('Initial Savings vs Future Savings with and without Investment')
plt.legend()
plt.grid(True)
plt.ticklabel_format(style='plain', axis='y')
plt.tight_layout()
plt.show()
